Решишь задачу с собеседования в крупной IT-компании.
Освоишь методы решения задач на тему «Анаграммы».
Поймёшь, как выбрать оптимальное решение на собеседовании.
Что такое анаграмма

Анаграмма — это слово или фраза, полученные перестановкой букв другого слова или фразы.  

Например, «СИЛАЧ» — это анаграмма слова «ЧИСЛА». Переставив буквы в слове «ЧИСЛА», можно получить «СИЛАЧ».  

Пример задачи с собеседования
Задачи на анаграммы часто встречаются в начале собеседования, как своего рода разминка. Представь, что у тебя есть 20 минут, чтобы решить следующую задачу.

Условие
Даны две строки s и t. Нужно вернуть True, если t является анаграммой s, и False в противном случае.  

Пример 1
Ввод: s = "hello", t = "lolhe"
Вывод: true
Пример 2
Ввод: s = "abc", t = "abcc"
Вывод: false
В чем сложность задачи
Первое, что может прийти на ум, — отсортировать обе строки и сравнить их:

def is_valid_anagram(s: str, t: str) -> bool:
    return sorted(s) == sorted(t)
Это работает, но не оптимально. Сортировка занимает O(n*log(n)) времени, а затраты памяти могут варьироваться от O(1) до O(n) в зависимости от реализации.  

Интервьюер ожидает более эффективного решения с временем O(n).
Оптимальное решение
Две строки являются анаграммами, если количество каждой буквы совпадает.


Например, в словах «ЛАСКА» и «СКАЛА» содержится:

2 буквы «А»
по 1 букве «С», «К» и «Л»
Мы можем использовать хеш-таблицу (словарь), чтобы подсчитать количество каждой буквы и сравнить эти подсчёты. Это решение работает за O(n) времени и использует O(n) памяти — намного быстрее, чем сортировка.

def is_valid_anagram(s: str, t: str) -> bool:
    if len(s) != len(t):
        return False
    count_s = {}
    count_t = {}
    for char in s:
        count_s[char] = count_s.get(char, 0) + 1
    for char in t:
        count_t[char] = count_t.get(char, 0) + 1
    return count_s == count_t
Это решение работает за O(n) времени и использует O(n) памяти, что намного оптимальнее предыдущего решения.  

Неожиданный вопрос
Хороший интервьюер после решения может спросить: «Можешь решить задачу без словарей, если строки содержат только строчные латинские буквы?»

Да, без переписывания решения тут не обойтись!
Улучшаем решение
Если строки содержат только 26 строчных латинских букв, можно использовать массив фиксированного размера для подсчёта букв.


Остаётся понять, как сопоставить букву 'a' с индексом 0 в массиве count, букву 'b' с индексом 1 и т.д. Тут пригодится таблица ASCII.  


ASCII таблица — это таблица, где каждому символу присвоено числовое значение. Полную таблицу можно найти в интернете, но нас интересует крайний столбец справа.

Значения увеличиваются на 1 от «a» до «z», что как раз нам и нужно для сопоставления буквы с индексом. Теперь осталось разобраться, как из символа получить число и наоборот:

# ord - переводит символ в число
print(ord("a")) # 97
# chr - переводит число в символ
print(chr(97)) # a

def is_valid_anagram(s: str, t: str) -> bool:
    # индекс - соответствует букве (0 - 'a', 1 - 'b', ...)
    #  значение - сколько раз встретили букву
    count = [0 for _ in range(26)]
    for char in s:
        # ord(char) - ord('a') - позволяет перевести 'a' -> 0, 'b' -> 1 и т д
        count[ord(char) - ord('a')] += 1

    # уменьшаем число букв, которые встретили проходя по строке t
    #  делаем это чтобы не заводить второй массив count.
    #  Если в самом конце массив получился только из 0 - значит
    #  все буквы в строках повтаряются
    for char in t:
        count[ord(char) - ord('a')] -= 1

    return count == [0 for _ in range(26)]
Алгоритм решения задачи:

Создаём массив count длинной 26 (по числу букв в алфавите).
Индексы в массиве соответствуют буквам (0 для 'a', 1 для 'b' и т.д.).
Проходим по первой строке и увеличиваем счётчики.
Проходим по второй строке и уменьшаем счётчики.
Если все элементы массива равны нулю, строки — анаграммы.
Какое решение выбрать 74
Если известно, что строки содержат ограниченный набор символов (например, только строчные латинские буквы), лучше использовать массив.
Если набор символов неизвестен или велик, словарь будет более универсальным.
Важно спросить интервьюера: «Известно ли, какие символы могут быть в строках?» Это покажет твою внимательность и умение выбирать оптимальное решение до написания кода. Такие вопросы идут только в плюс на собеседовании!
Заключение
Теперь ты знаешь, как эффективно решать задачи на анаграммы и выбирать лучшее решение в зависимости от условий задачи. Скорее переходи к практике, чтобы закрепить знания!