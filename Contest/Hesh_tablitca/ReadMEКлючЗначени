Ключ и значение в хеш-таблице
В этом уроке ты
Научишься правильно определять ключи и значения в хеш-таблице.
Поймёшь паттерны построения хеш-таблиц.
Решишь задачу с реального собеседования в крупной IT-компании (BigTech).
Тип ключа в хеш-таблице

Не все типы данных могут выступать в качестве ключей в хеш-таблице. В каждом языке программирования есть свои правила для типов, которые могут быть ключами, но в большинстве случаев ключ должен быть неизменяемым.

Если бы ключ был изменяемым, то каждый раз, когда он меняется, хеш-таблицу пришлось бы перестраивать, что замедлило бы её работу. Это не единственная причина, но этого достаточно, чтобы понять, почему в большинстве языков ключами могут быть только неизменяемые типы.

«Какими типами могут быть ключи в хеш-таблице?» Этот вопрос часто задают на собеседованиях для специалистов уровня junior и middle. Ответ зависит от языка программирования, поэтому изучи правила для своего языка:

# Любой не изменяемый тип может быть ключом. Например:
# - int
# - tuple
# - bool
# - str
# - ...
Что чаще всего является ключом, а что значением

Чтобы эффективно использовать хеш-таблицу, важно понимать, что может быть ключом, а что — значением. Это знание помогает решать задачи, используя эту структуру данных, даже если ты новичок.


Таблица содержит не все возможное варианты, но точно поможет, если ты только начинаешь изучение этой структуры данных!

Паттерны построения хеш-таблицы

Существует два основных способа построения хеш-таблицы из входных данных:

Постепенное построение: Проходим по элементам, добавляя их в хеш-таблицу и выполняя поиск. Такой подход мы использовали выше.
Предварительное построение: Сначала создаём хеш-таблицу со всеми входными данными, а затем используем её.
Первый подход чаще подходит, если нужно найти предыдущий элемент с определёнными свойствами. Второй — когда данные нужны для предварительного анализа.

С практикой ты научишься выбирать подходящий способ! Читай дальше и скорее переходи к решению задач, чтобы закрепить знания на практике.

Пример задачи с собеседования

Условие
Дано n точек на плоскости. Необходимо определить, существует ли такая прямая, параллельная оси y, которая отражает данные точки симметрично.

Другими словами, требуется ответить, существует ли прямая, относительно которой, если отразить все точки, множество исходных точек останется таким же, как и множество отражённых точек.

Пример 1

Ввод: points = [[1,2],[3,1],[4,2],[2,1],[2,1]]
Вывод: true
Объяснение: Мы можем выбрать прямую x = 2.5
Пример 2

Ввод: points = [[1,2],[3,1]]
Вывод: false
Объяснение: Мы не можем найти линию, удовлетворяющую условию.
Оптимальное решение
#Время: O(n), где n — количество точек.
#Память: O(n), где n — количество точек.
class Solution:
    def isReflected(self, points: List[List[int]]) -> bool:
        # находим минимальный и максимальный X
        maxX = max(x for x, y in points)
        minX = min(x for x, y in points)

        # сделали словарь, чтобы проверять наличие точки за O(1)
        points_set = {(x, y) for x, y in points}
        for x, y in points:
            # symX = maxX + minX - x
            # symX - координата точки по оси X симметричной x
            if (maxX + minX - x, y) not in points_set: return False
        return True
Для решения задачи нам нужно проверить, существует ли вертикальная ось симметрии, которая отражает все точки на плоскости. Процесс можно разделить на несколько этапов:

Найти максимальное и минимальное значение по оси x у точек.
Для каждой точки из исходного массива вычисляется её симметричная точка относительно линии симметрии: symX=maxX+minX−x.
Затем проверяется, содержится ли симметричная точка в множестве pointSet. Если хотя бы одна симметричная точка отсутствует, возвращается false.
В данной задаче мы как раз используем паттерн предварительного наполнения хеш-таблицы. Мы сначала добавляем все точки в нашу таблицу, а затем проверяем симметрию между ними.
Эту задачу также можно решить, вычислив ось симметрии: symmetryLine = (minX + maxX) / 2. Однако важно учитывать, что эта ось симметрии может быть числом с плавающей точкой, поэтому необходимо аккуратно обращаться с приведением типов.  

Как получилась формула нахождения симметричной точки?
Формула symX=minX+maxX−x основана на свойстве отражения точки относительно вертикальной линии симметрии, которая проходит через середину между minX и maxX. Симметричная точка symX находится на таком же расстоянии от линии, но с противоположной стороны.

Возьмем первый пример и точку [1, 2], подставим ее в формулу. Исходя из входных данных, minX = 1, maxX = 4. Тогда: 1 + 4 - 1 = 4. Это означает, что симметричная точка должна иметь координаты [4, 2].

Заключение
В этой лекции мы узнали, какие данные чаще всего используются как ключи, а какие — как значения. Рассмотрели паттерны заполнения хеш-таблиц и применили новые знания для решения достаточно сложной задачи. Теперь самое время закрепить материал на практике — переходи к решению задач!